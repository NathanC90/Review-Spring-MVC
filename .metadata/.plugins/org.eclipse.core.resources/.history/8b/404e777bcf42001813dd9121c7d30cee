package com.web.store.controller;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.StringUtils;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.WebDataBinder;
import org.springframework.web.bind.annotation.InitBinder;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.web.store.model.BookBean;
import com.web.store.model.CompanyBean;
import com.web.store.service.ProductService;

@Controller
public class ProductController {	
	@Autowired
	ProductService productService;	
	@RequestMapping("/products")
	public String list(Model model) {
		List<BookBean> list = productService.getAllProducts();
		model.addAttribute("products", list);
		return "products";
	}
	
	@RequestMapping("/update/stock")
	public String updateStock(Model model) {
		productService.updateAllStock();
		return "redirect:/products";
	}
	
	@RequestMapping("/queryByCategory")
	public String getCategoryList(Model model) {
		List<String> list = productService.getAllCategories();
		model.addAttribute("categoryList", list);
		return "types/category";
	}
	
	@RequestMapping("/products/{category}")
	public String getProductByCategory(@PathVariable("category")String category, Model model) {
		List<BookBean> products = productService.getProductsByCategory(category);
		model.addAttribute("products", products);
		return "products";
	}
	
	@RequestMapping("/product")
	public String getProductById(@RequestParam("id") Integer id, Model model) {
		model.addAttribute("product", productService.getProductById(id));
		return "product";
	}
	
	@RequestMapping(value="/products/add", method = RequestMethod.GET)
	public String getAddNewProductForm(Model model) {
		BookBean bb = new BookBean();
		model.addAttribute("bookBean", bb);
		return "addProduct";
	}
	
	@RequestMapping(value="/products/add", method = RequestMethod.POST)
	public String processAddNewProductForm(@ModelAttribute("bookBean")BookBean bb) {
		productService.addProduct(bb);
		return "redirect:/products";
	}
	
	@ModelAttribute("companyList")
	public Map<Integer, String> getCompanyList(){
		Map<Integer, String> companyMap = new HashMap<>();
		List<CompanyBean> list = productService.getCompanyList();
		for(CompanyBean cb : list) {
			companyMap.put(cb.getId(), cb.getName());
		}
		return companyMap;
	}
	
	@ModelAttribute("categoryList")
	public List<String> getCategoryList(){
		return productService.getAllCategories();
	}
	
//	@InitBinder
//	public void whiteListing(WebDataBinder binder) {
//		binder.setAllowedFields(
//				"author",
//				"bookNo",
//				"category",
//				"price",
//				"title",
//				"companyId"
//				);
//	}
//	
//	@RequestMapping(value = "/products/add", method = RequestMethod.POST)
//	public String processAddNewProductForm(@ModelAttribute("bookBean") BookBean bb,
//			BindingResult result ) {  //三個地方要完全一樣：bookBean
//		String[] suppressedFields = result.getSuppressedFields();
//		if(suppressedFields.length > 0) {
//			throw new RuntimeException("嘗試傳入不允許的欄位："+StringUtils.arrayToCommaDelimitedString(suppressedFields));
//		}
//		productService.addProduct(bb);
//		return "redirect:/products";
//	}
	
	@RequestMapping(value = "/forwardDemo")
	public String forward(Model model, HttpServletRequest request) {
		String uri = request.getRequestURI();
		model.addAttribute("modelData0", "這是以/fowardDemo送來的請求");
		model.addAttribute("uri0", uri);
		return "forward:/anotherFWD";
	}
	
	@RequestMapping(value = "/anotherFWD")
	public String forwardA(Model model, HttpServletRequest request) {
		String uri = request.getRequestURI();
		model.addAttribute("modelData1", "這是以/anotherFWD送來的請求");
		model.addAttribute("uri1", uri);
		return "forwardedPage";
	}
	
	@RequestMapping(value = "/redirectDemo")
	public String redirect(Model model, RedirectAttributes redirectAttributes, HttpServletRequest request) {
		String uri = request.getRequestURI();
		model.addAttribute("modelData2", "這是以/redirectDemo送來的請求，即將通知瀏覽器對"+"新網址發出請求，但瀏覽器不會顯示這樣的訊息。");
		model.addAttribute("uri2", uri);
		redirectAttributes.addFlashAttribute("modelData3", "這是加在RedirectAttributes"+"物件內的屬性物件，瀏覽器會顯示。");
		redirectAttributes.addFlashAttribute("uri3", uri);
		return "redirect:/redirectAnother";
	}
	
	@RequestMapping(value = "/redirectAnother")
	public String redirectA(Model model, HttpServletRequest request) {
		return "redirectedPage";
	}

}
